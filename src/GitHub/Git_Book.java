package GitHub;

public class Git_Book {
    public static void main(String[] args) {
/*
 * Git - это система контроля версий. Контролируются изменения в одном или нескольких файлах, и предоставляет
 *  возможность вернуться на прежнюю версию файла. А также предоставляет возможность работать над одной
 * программой группе программистов, совмещая код, показывая разницы и историю разработки.
 * Есть разные сервисы:
 *      svn/subversion (бесплатный, свободная централизованная система управления версиями, официально
 *          выпущенная в 2004 году в США компанией CollabNet);
 *      git - локальный репозиторий (бесплатный)
 *      gitHub (условно-бесплатный, официально принадлежит корпорации Microsoft);
 *      gitLab (условно-бесплатный, основали выходцы из Украины Валерий Сизов и Дмитрий Запорожец в 2011 году,
 *          в 2013 году к ним присоединился Сид Сибранджи);
 *
 * Репозиторий - это место хранения кода, изначально локально и далее отправляться в облако (web-server).
 * У одного аккаунта git, может быть много репозиториев.
 *
 * Схема работы:
 *                                              Репозиторий
 *                          _________________________________________________
 *                          |      Код, например интернет-магазина          |
 *                 _______  |_______________________________________________|←------
 *         Update |     Push  ↑         |        ↑                  |              |
 *               1|          2|       1 |       2|                 1|            2 |
 *         _______↓_______   |      ___↓________|______       _____↓______________|__
 *         |       commit|____|     |                 |        |                    |
 *         | Авторизация |          | Новая страница  |        | Отладка коннектора |
 *         |_____________|          |_________________|        |____________________|
 *           Компьютер 1               Компьютер 2              Компьютер 3
 *
 * 1. Update - (обновить) скачать из облака обновления (push коллег)
 * 2. Commit - (фиксировать) сохранить в локальный git
 * 3. Push - (затолкать) сохранить в облачный git
 */
/* УСТАНОВКА GIT IDEA
         * 1. Нужно создать аккаунт на https://github.com/
         * 2. Установить github (https://github.com/git-guides/install-git) - скачать git.exe download github.
         *    У Linux/Unix есть свой хороший терминал, у windows PowerShell, но git оригинальный.
         * 3. Idea - File - Settings - Version Control - Git: указать пусть установки git (C:\Program Files\Git\cmd\git.exe) и нажать test
         * 4. Idea - File - Settings - Version Control - GitHub: Залогиниться
         * 5. Создать (проверить кодировку) и загрузить новый проект в репозиторий: menu VCS - Import into Version Control - Share Project on GitHub
         * 6. Перейти на сайт и посмотреть добавленный репозиторий
         * 7. Делаем изменения кода показать зеленные и серые полоски
         * 8. История изменения
         */
/*
         * ПОЛЕЗНЫЕ ССЫЛКИ
         * 1. Книга о GIT, в том числе на русском: https://git-scm.com/book/ru/v2
         * 2. Ссылка на терминал: https://git-scm.com/downloads
         * 3. Обучение git: https://learngitbranching.js.org/?locale=ru_RU
         */
/*
 * ОСНОВНЫЕ КОМАНДЫ ДЛЯ ТЕРМИНАЛА
 *   Проиндексировать файлы: git add .
 *   Сделать коммит: git commit -m ‘comment’
 *   Отправить данные на удаленный репозиторий:  git push
 *   Проверить ветку: git branch
 *   Cтатус изменений: git status
 *   Создать ветку: git branch ‘name of branch’
 *   Переключиться на другую ветку: git checkout ‘name of branch’
 *   Создать ветку и сразу перейти на нее: git checkout -b ‘name of branch’
 *   Клонировать удаленный репозиторий: git clone ‘url’
 *   Подтянуть изменения из удаленного в локальный репозиторий: git pull
 *
 *
 *  Алгоритм создания репозитория и работы через терминал:
 *  0. Скачать и установить git: https://git-scm.com/downloads
 *  1. Создать локально папку на рабочем столе и открыть её, показать скрытые файлы (на мак соманд+шифт+точка)
 *  2. Правой клавишей внутри папки - показать дополнительно - Git Brash Here
 *  3. Откроется терминал git, проверить путь папки
 *      КОМАНДЫ:
 *  4. Смотреть содержимое папки: "dir" на Win, "ls" на mac bkb Linux/Unix, ни чего не покажет потому что папка
 *      пустая, создать файл блокнота temp.txt и еще раз посмотреть
 *  5. Подняться вверх из папки: "cd .." (с пробелом)
 *  6. Смотреть содержимое рабочего стола вновь: "dir" на Win, "ls" на mac bkb Linux/Unix
 *  7. Зайти в папку: "cd gitProject" (можно не дописывая нажать tab)
 *  8. Очистить окно терминала: "clear"
 *  9. Инициализировать git: "git init" (сделали папку репозиторием)
 *     Добавить файлы под версионный контроль:
 * 10. В созданном каталоге добавить проект Java, подтвердить следование git и видно, что файл зеленный и есть стрелки
 * 11. В терминале "git status"
 *          On branch master - Это говорит о мастер ветке, основной ветке
 *           No commits yet  - Нет фиксации изменений файла для git
 *
 *          Changes to be committed: - файлы под версионным контролем из IDEA
 *            (use "git rm --cached <file>..." to unstage)
 *                  new file:   src/gitTest/Main.java
 *
 *           Changes not staged for commit: - файлы под версионным контролем из IDEA
 *            (use "git add <file>..." to update what will be committed)
 *            (use "git restore <file>..." to discard changes in working directory)
 *                     modified:   src/gitTest/Main.java
 *
 *          Untracked files:   - файлы не под версионным контролем
 *            (use "git add <file>..." to include in what will be committed)
 *                  .idea/
 *                     gitProjectJava33.iml
 *                     temp.txt
 * 12. Добавить и файл блокнота под версионный контроль: git add temp.txt (можно не дописывая нажать tab)
 * 13. Проверить git status и видим что он temp.txt стал отслеживаемым
 * 14. Чтобы отменить версионный контроль: git rm --cached temp.txt
 * 15. Проверить git status и видим что он temp.txt стал не отслеживаемым
 * 16. А если несколько файлов? Создадим еще Main1, Main2, Main3 и не соглашаться в Idea делать add
 * 17. Вернуться в терминал и сделать: clear и git status, видимо untracked файлы толькочто созданные
 * 18. Добавить все файлы "git add .", смотрим git status
 * 19. Дописать в файл Main2 psvm и смотрим git status, видим
 *      modified:   src/gitTest/Main3.java
 * 20. Чтобы это изменения попало в Git, вновь "git add ." и смотрим git status
 * 21. Зафиксировать изменения файлов  в версию: git commit -m 'user's message'
 *      user's message - ответ на вопрос, что сделано на момент commit
 * 22. Если git не залогинин, тогда будет сообщение fatal: unable to auto detect email adress...

 Алексей Багиров, [17.09.2022 11:49]
 * Нужно на сайте зарегистрироваться на github или gitlab и далее в терминале указать логин и пароль:
 *  git config --global user.email '89168883138@mail.ru'
 *  git config --global user.name "Alexey Bagirov"
 * 23. чтобы проверить логин:  git config user.email
 *                             git config user.name
 * 24. Выполнить commit: git commit -m 'user's message'
 *     Commit - это снимок (состояние) кода, до которого можно будет откатиться.
 * 25. Есть файлы автоматически генерируемые, по которым не нужен контроль версий
 *    - создать файл .gitignore (из блокнота) в каталоге, где есть папка .git
 *    - создать файл module.txt и папку Modules
 *    - в файле .gitignore прописать именна этих файлов
 *              /Modules
 *               Module.txt
 *    - git status, видим файл .gitignore в неотслеживаемых
 *    - git add .
 *    - git commit -m 'text'
 *
 */
/*
         * ВЕТВЛЕНИЕ GIT
         *
         * Как могут разработчики работать в одном репозитории, с одними и теме же файлами и не мешать
         * друг другу, как их код потом можно объединить?
         *
         * Для этого созданы branch (ветки). Каждый разработчик может использовать свою ветку и commit
         * изменения в своей ветке, а потом отправить свои изменения в главную ветку.
         *
         * Обычно под каждую задачу разработчик создает свою ветку, пишет код в ней и потом отправляет
         * результат в главную ветку, которая часто называется master.
         *
         * 1. Как проверить на какой ветке мы находимся: git branch
         * 2. Как добавить новую ветку под новую задачу:  git branch taskTest, затем проверить git branch
         *    Зеленым подсвечена та ветка на который мы сейчас находимся.
         * 3. Удалить ветку: git branch -D taskTest, затем проверить git branch
         * 4. Вновь создадим новую ветку под задачу разработки: git branch newTask, затем проверить git branch
         * 5. Перейти на созданную ветку: git checkout newTask, затем проверить git branch
         * 6. Вернуться на master ветку: git checkout master
         * 7. Удалить ветку: git branch -D newTask, затем проверить git branch
         * 8. Создадим новую ветку и сразу перейдем на неё: git checkout -b newModule, на жаргоне от branch-евался
         * 9. Добавим файл NewModule.java и что-нибудь допишем
         * 10. git status, git add ., git commit -m 'text'
         * 11. Перейдем на ветку мастер: git checkout master и смотри что в idea мы уже не видим файл NewModule.java
         * 12. Теперь нам как главному разработчику нужны изменения на ветке master из ветки newModule
         *     Важно находиться на той ветке на которую мы хотим забрать изменения (git checkout master)
         *     и пишем: git merge newModule
         * ====На этом локальная работа с git окончена======
         * Далее на gitHub или GitLab
         * 1. Создается новый удаленный репозиторий (New repository), название обычно также как каталог на локальной машине
         * 2. Указываем discription и настройку public или private
         * 3. Связать локальную папку и репозиторий: находим команды в разделе
         *  …or push an existing repository from the command line
         *  и копируем строку
         *  git remote add origin https://github.com/bagirovAlex/gitProjectJava33.git
         *  и в терминал вставить shift+insert
         *
         * 4. После соединения локальной папки и удаленного репозитория нужно закачать файлы в репозиторий:
         *      git push -u origin master
         *  после обновить страну gitHub и увидим свои файлы
         * 5. Добавить на ветка мастер еще один новый файл Main_test.java
         *  git add .
         *  git commit -m 'text'
         *  теперь изменения зафиксированы локально, далее нужно отправить в удаленный репозиторий
         * 6. Отправить на удаленный репозиторий: git push origin master, можно проверить на сайте обнолвение
         *
         * Клонирование репозитория
         * 1. На странице gitHub проекта, есть Code и ссылка для клонирования HTTPS:
         *      https://github.com/bagirovAlex/gitProjectJava33.git
         *      SSH для конфидициальности используется дополнительный код
         *      Например, вы создали проект, репозиторий и хотите подключить к работе другого разработчика.
         *      Отправляете ему ссылку:https://github.com/bagirovAlex/gitProjectJava33.git
         *      Говорим: вот проект, склоннируй себе репозиторий и делай такую-то задачу.
         * 2. Разработчик у себя создает локальную папку newProject - создать папку на рабочем столе
         * 3. Закрыть терминал и открыть из новой папки.
         * 4. В терминале пишет: git clone https://github.com/bagirovAlex/gitProjectJava33.git
         * 5. Проверяем локальную папку и в ней все файлы (dir, cd gitProjectJava33, dir)
         *      Навигация:
         *            Подняться вверх из папки: "cd .." (с пробелом)

         */
/*          *  Смотреть содержимое рабочего стола вновь: "dir" на Win, "ls" на mac bkb Linux/Unix
                *          *  Зайти в папку: "cd gitProject" (можно не дописывая нажать tab)
         *          *  Очистить окно терминала: "clear"
                *
         * 6. Разработчик открывает из папки проект в своей среде разработки (сделать изменения)
                * 7. git add ., git commit -m 'text', git push из изменений улетают, на сайте проверить
         * 8. Далее вам как главному разработчика нужно изменения из удаленного репозитория получить
                *  к себе локально, проверить что этих изменений локально с сайта еще нет.
         *  Открыть терминал из нашей первой локальной папки
                *  git pull
                * В idea нажать Update
                *
         */
    }
}
